///
/// HybridSoundSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSoundSpec.hpp"

// Forward declaration of `HybridSoundSpec_cxx` to properly resolve imports.
namespace NitroSound { class HybridSoundSpec_cxx; }

// Forward declaration of `RecordBackType` to properly resolve imports.
namespace margelo::nitro::sound { struct RecordBackType; }
// Forward declaration of `PlayBackType` to properly resolve imports.
namespace margelo::nitro::sound { struct PlayBackType; }
// Forward declaration of `PlaybackEndType` to properly resolve imports.
namespace margelo::nitro::sound { struct PlaybackEndType; }

#include <NitroModules/Promise.hpp>
#include <string>
#include <optional>
#include <unordered_map>
#include "RecordBackType.hpp"
#include <functional>
#include "PlayBackType.hpp"
#include "PlaybackEndType.hpp"
#include <vector>

#include "NitroSound-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::sound {

  /**
   * The C++ part of HybridSoundSpec_cxx.swift.
   *
   * HybridSoundSpecSwift (C++) accesses HybridSoundSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSoundSpec_cxx can directly inherit from the C++ class HybridSoundSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSoundSpecSwift: public virtual HybridSoundSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridSoundSpecSwift(const NitroSound::HybridSoundSpec_cxx& swiftPart):
      HybridObject(HybridSoundSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroSound::HybridSoundSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<void>> startRecorder() override {
      auto __result = _swiftPart.startRecorder();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> stopRecorder() override {
      auto __result = _swiftPart.stopRecorder();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setVADMode() override {
      auto __result = _swiftPart.setVADMode();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setManualMode() override {
      auto __result = _swiftPart.setManualMode();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setIdleMode() override {
      auto __result = _swiftPart.setIdleMode();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setVADThreshold(double threshold) override {
      auto __result = _swiftPart.setVADThreshold(std::forward<decltype(threshold)>(threshold));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> pauseRecorder() override {
      auto __result = _swiftPart.pauseRecorder();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> resumeRecorder() override {
      auto __result = _swiftPart.resumeRecorder();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> startPlayer(const std::optional<std::string>& uri, const std::optional<std::unordered_map<std::string, std::string>>& httpHeaders) override {
      auto __result = _swiftPart.startPlayer(uri, httpHeaders);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> stopPlayer() override {
      auto __result = _swiftPart.stopPlayer();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> pausePlayer() override {
      auto __result = _swiftPart.pausePlayer();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> resumePlayer() override {
      auto __result = _swiftPart.resumePlayer();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> seekToPlayer(double time) override {
      auto __result = _swiftPart.seekToPlayer(std::forward<decltype(time)>(time));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> setVolume(double volume) override {
      auto __result = _swiftPart.setVolume(std::forward<decltype(volume)>(volume));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> setPlaybackSpeed(double playbackSpeed) override {
      auto __result = _swiftPart.setPlaybackSpeed(std::forward<decltype(playbackSpeed)>(playbackSpeed));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> setLoopEnabled(bool enabled) override {
      auto __result = _swiftPart.setLoopEnabled(std::forward<decltype(enabled)>(enabled));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> restartEngine() override {
      auto __result = _swiftPart.restartEngine();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> crossfadeTo(const std::string& uri, std::optional<double> duration) override {
      auto __result = _swiftPart.crossfadeTo(uri, duration);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> startAmbientLoop(const std::string& uri, double volume) override {
      auto __result = _swiftPart.startAmbientLoop(uri, std::forward<decltype(volume)>(volume));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> stopAmbientLoop(std::optional<double> fadeDuration) override {
      auto __result = _swiftPart.stopAmbientLoop(fadeDuration);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void setSubscriptionDuration(double sec) override {
      auto __result = _swiftPart.setSubscriptionDuration(std::forward<decltype(sec)>(sec));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void addRecordBackListener(const std::function<void(const RecordBackType& /* recordingMeta */)>& callback) override {
      auto __result = _swiftPart.addRecordBackListener(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void removeRecordBackListener() override {
      auto __result = _swiftPart.removeRecordBackListener();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void addPlayBackListener(const std::function<void(const PlayBackType& /* playbackMeta */)>& callback) override {
      auto __result = _swiftPart.addPlayBackListener(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void removePlayBackListener() override {
      auto __result = _swiftPart.removePlayBackListener();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void addPlaybackEndListener(const std::function<void(const PlaybackEndType& /* playbackEndMeta */)>& callback) override {
      auto __result = _swiftPart.addPlaybackEndListener(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void removePlaybackEndListener() override {
      auto __result = _swiftPart.removePlaybackEndListener();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setLogCallback(const std::function<void(const std::string& /* message */)>& callback) override {
      auto __result = _swiftPart.setLogCallback(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setSegmentCallback(const std::function<void(const std::string& /* filename */, const std::string& /* filePath */, bool /* isManual */, double /* duration */)>& callback) override {
      auto __result = _swiftPart.setSegmentCallback(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setManualSilenceCallback(const std::function<void()>& callback) override {
      auto __result = _swiftPart.setManualSilenceCallback(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::optional<std::string> getDebugLogPath() override {
      auto __result = _swiftPart.getDebugLogPath();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::vector<std::string> getAllDebugLogPaths() override {
      auto __result = _swiftPart.getAllDebugLogPaths();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::optional<std::string> readDebugLog(const std::optional<std::string>& path) override {
      auto __result = _swiftPart.readDebugLog(path);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> clearDebugLogs() override {
      auto __result = _swiftPart.clearDebugLogs();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string mmss(double secs) override {
      auto __result = _swiftPart.mmss(std::forward<decltype(secs)>(secs));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string mmssss(double milisecs) override {
      auto __result = _swiftPart.mmssss(std::forward<decltype(milisecs)>(milisecs));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroSound::HybridSoundSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::sound
