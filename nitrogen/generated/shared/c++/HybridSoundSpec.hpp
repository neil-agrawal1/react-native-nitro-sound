///
/// HybridSoundSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `RecordBackType` to properly resolve imports.
namespace margelo::nitro::sound { struct RecordBackType; }
// Forward declaration of `PlayBackType` to properly resolve imports.
namespace margelo::nitro::sound { struct PlayBackType; }
// Forward declaration of `PlaybackEndType` to properly resolve imports.
namespace margelo::nitro::sound { struct PlaybackEndType; }

#include <NitroModules/Promise.hpp>
#include <optional>
#include <string>
#include <unordered_map>
#include "RecordBackType.hpp"
#include <functional>
#include "PlayBackType.hpp"
#include "PlaybackEndType.hpp"
#include <vector>

namespace margelo::nitro::sound {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Sound`
   * Inherit this class to create instances of `HybridSoundSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridSound: public HybridSoundSpec {
   * public:
   *   HybridSound(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridSoundSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridSoundSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridSoundSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<void>> startRecorder() = 0;
      virtual std::shared_ptr<Promise<void>> stopRecorder() = 0;
      virtual std::shared_ptr<Promise<void>> setVADMode() = 0;
      virtual std::shared_ptr<Promise<void>> setManualMode() = 0;
      virtual std::shared_ptr<Promise<void>> setIdleMode() = 0;
      virtual std::shared_ptr<Promise<void>> startManualSegment(std::optional<double> silenceTimeoutSeconds) = 0;
      virtual std::shared_ptr<Promise<void>> stopManualSegment() = 0;
      virtual std::shared_ptr<Promise<void>> setVADThreshold(double threshold) = 0;
      virtual std::shared_ptr<Promise<std::string>> pauseRecorder() = 0;
      virtual std::shared_ptr<Promise<std::string>> resumeRecorder() = 0;
      virtual std::shared_ptr<Promise<std::string>> startPlayer(const std::optional<std::string>& uri, const std::optional<std::unordered_map<std::string, std::string>>& httpHeaders) = 0;
      virtual std::shared_ptr<Promise<std::string>> stopPlayer() = 0;
      virtual std::shared_ptr<Promise<std::string>> pausePlayer() = 0;
      virtual std::shared_ptr<Promise<std::string>> resumePlayer() = 0;
      virtual std::shared_ptr<Promise<std::string>> seekToPlayer(double time) = 0;
      virtual std::shared_ptr<Promise<std::string>> setVolume(double volume) = 0;
      virtual std::shared_ptr<Promise<std::string>> setPlaybackSpeed(double playbackSpeed) = 0;
      virtual std::shared_ptr<Promise<double>> getCurrentPosition() = 0;
      virtual std::shared_ptr<Promise<double>> getDuration() = 0;
      virtual std::shared_ptr<Promise<std::string>> setLoopEnabled(bool enabled) = 0;
      virtual std::shared_ptr<Promise<void>> restartEngine() = 0;
      virtual std::shared_ptr<Promise<std::string>> crossfadeTo(const std::string& uri, std::optional<double> duration) = 0;
      virtual std::shared_ptr<Promise<void>> startAmbientLoop(const std::string& uri, double volume) = 0;
      virtual std::shared_ptr<Promise<void>> stopAmbientLoop(std::optional<double> fadeDuration) = 0;
      virtual void setSubscriptionDuration(double sec) = 0;
      virtual void addRecordBackListener(const std::function<void(const RecordBackType& /* recordingMeta */)>& callback) = 0;
      virtual void removeRecordBackListener() = 0;
      virtual void addPlayBackListener(const std::function<void(const PlayBackType& /* playbackMeta */)>& callback) = 0;
      virtual void removePlayBackListener() = 0;
      virtual void addPlaybackEndListener(const std::function<void(const PlaybackEndType& /* playbackEndMeta */)>& callback) = 0;
      virtual void removePlaybackEndListener() = 0;
      virtual void setLogCallback(const std::function<void(const std::string& /* message */)>& callback) = 0;
      virtual void setSegmentCallback(const std::function<void(const std::string& /* filename */, const std::string& /* filePath */, bool /* isManual */, double /* duration */)>& callback) = 0;
      virtual void setManualSilenceCallback(const std::function<void()>& callback) = 0;
      virtual void writeDebugLog(const std::string& message) = 0;
      virtual std::optional<std::string> getDebugLogPath() = 0;
      virtual std::vector<std::string> getAllDebugLogPaths() = 0;
      virtual std::optional<std::string> readDebugLog(const std::optional<std::string>& path) = 0;
      virtual std::shared_ptr<Promise<void>> clearDebugLogs() = 0;
      virtual std::string mmss(double secs) = 0;
      virtual std::string mmssss(double milisecs) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Sound";
  };

} // namespace margelo::nitro::sound
