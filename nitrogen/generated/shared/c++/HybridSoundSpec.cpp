///
/// HybridSoundSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridSoundSpec.hpp"

namespace margelo::nitro::sound {

  void HybridSoundSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("startRecorder", &HybridSoundSpec::startRecorder);
      prototype.registerHybridMethod("stopRecorder", &HybridSoundSpec::stopRecorder);
      prototype.registerHybridMethod("setVADMode", &HybridSoundSpec::setVADMode);
      prototype.registerHybridMethod("setManualMode", &HybridSoundSpec::setManualMode);
      prototype.registerHybridMethod("setIdleMode", &HybridSoundSpec::setIdleMode);
      prototype.registerHybridMethod("setVADThreshold", &HybridSoundSpec::setVADThreshold);
      prototype.registerHybridMethod("pauseRecorder", &HybridSoundSpec::pauseRecorder);
      prototype.registerHybridMethod("resumeRecorder", &HybridSoundSpec::resumeRecorder);
      prototype.registerHybridMethod("startPlayer", &HybridSoundSpec::startPlayer);
      prototype.registerHybridMethod("stopPlayer", &HybridSoundSpec::stopPlayer);
      prototype.registerHybridMethod("pausePlayer", &HybridSoundSpec::pausePlayer);
      prototype.registerHybridMethod("resumePlayer", &HybridSoundSpec::resumePlayer);
      prototype.registerHybridMethod("seekToPlayer", &HybridSoundSpec::seekToPlayer);
      prototype.registerHybridMethod("setVolume", &HybridSoundSpec::setVolume);
      prototype.registerHybridMethod("setPlaybackSpeed", &HybridSoundSpec::setPlaybackSpeed);
      prototype.registerHybridMethod("setLoopEnabled", &HybridSoundSpec::setLoopEnabled);
      prototype.registerHybridMethod("restartEngine", &HybridSoundSpec::restartEngine);
      prototype.registerHybridMethod("crossfadeTo", &HybridSoundSpec::crossfadeTo);
      prototype.registerHybridMethod("startAmbientLoop", &HybridSoundSpec::startAmbientLoop);
      prototype.registerHybridMethod("stopAmbientLoop", &HybridSoundSpec::stopAmbientLoop);
      prototype.registerHybridMethod("setSubscriptionDuration", &HybridSoundSpec::setSubscriptionDuration);
      prototype.registerHybridMethod("addRecordBackListener", &HybridSoundSpec::addRecordBackListener);
      prototype.registerHybridMethod("removeRecordBackListener", &HybridSoundSpec::removeRecordBackListener);
      prototype.registerHybridMethod("addPlayBackListener", &HybridSoundSpec::addPlayBackListener);
      prototype.registerHybridMethod("removePlayBackListener", &HybridSoundSpec::removePlayBackListener);
      prototype.registerHybridMethod("addPlaybackEndListener", &HybridSoundSpec::addPlaybackEndListener);
      prototype.registerHybridMethod("removePlaybackEndListener", &HybridSoundSpec::removePlaybackEndListener);
      prototype.registerHybridMethod("setLogCallback", &HybridSoundSpec::setLogCallback);
      prototype.registerHybridMethod("setSegmentCallback", &HybridSoundSpec::setSegmentCallback);
      prototype.registerHybridMethod("setManualSilenceCallback", &HybridSoundSpec::setManualSilenceCallback);
      prototype.registerHybridMethod("getDebugLogPath", &HybridSoundSpec::getDebugLogPath);
      prototype.registerHybridMethod("getAllDebugLogPaths", &HybridSoundSpec::getAllDebugLogPaths);
      prototype.registerHybridMethod("readDebugLog", &HybridSoundSpec::readDebugLog);
      prototype.registerHybridMethod("clearDebugLogs", &HybridSoundSpec::clearDebugLogs);
      prototype.registerHybridMethod("mmss", &HybridSoundSpec::mmss);
      prototype.registerHybridMethod("mmssss", &HybridSoundSpec::mmssss);
    });
  }

} // namespace margelo::nitro::sound
