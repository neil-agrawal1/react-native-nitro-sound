///
/// HybridSoundSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridSoundSpec.hpp"




namespace margelo::nitro::sound {

  using namespace facebook;

  class JHybridSoundSpec: public jni::HybridClass<JHybridSoundSpec, JHybridObject>,
                          public virtual HybridSoundSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/sound/HybridSoundSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridSoundSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridSoundSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridSoundSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridSoundSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    std::shared_ptr<Promise<void>> startRecorder() override;
    std::shared_ptr<Promise<void>> stopRecorder() override;
    std::shared_ptr<Promise<std::string>> pauseRecorder() override;
    std::shared_ptr<Promise<std::string>> resumeRecorder() override;
    std::shared_ptr<Promise<std::string>> startPlayer(const std::optional<std::string>& uri, const std::optional<std::unordered_map<std::string, std::string>>& httpHeaders) override;
    std::shared_ptr<Promise<std::string>> stopPlayer() override;
    std::shared_ptr<Promise<std::string>> pausePlayer() override;
    std::shared_ptr<Promise<std::string>> resumePlayer() override;
    std::shared_ptr<Promise<std::string>> seekToPlayer(double time) override;
    std::shared_ptr<Promise<std::string>> setVolume(double volume) override;
    std::shared_ptr<Promise<std::string>> setPlaybackSpeed(double playbackSpeed) override;
    std::shared_ptr<Promise<std::string>> setLoopEnabled(bool enabled) override;
    std::shared_ptr<Promise<std::string>> crossfadeTo(const std::string& uri, std::optional<double> duration) override;
    void setSubscriptionDuration(double sec) override;
    void addRecordBackListener(const std::function<void(const RecordBackType& /* recordingMeta */)>& callback) override;
    void removeRecordBackListener() override;
    void addPlayBackListener(const std::function<void(const PlayBackType& /* playbackMeta */)>& callback) override;
    void removePlayBackListener() override;
    void addPlaybackEndListener(const std::function<void(const PlaybackEndType& /* playbackEndMeta */)>& callback) override;
    void removePlaybackEndListener() override;
    void setLogCallback(const std::function<void(const std::string& /* message */)>& callback) override;
    std::string mmss(double secs) override;
    std::string mmssss(double milisecs) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridSoundSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::sound
